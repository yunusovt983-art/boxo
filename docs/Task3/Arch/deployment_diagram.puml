@startuml Task3_Deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

title Task 3: Диаграмма развертывания оптимизированного блочного хранилища

Deployment_Node(server, "IPFS Node Server", "Linux Server") {
    
    Deployment_Node(app_runtime, "Go Runtime", "Go 1.21+") {
        
        Container(boxo_app, "Boxo IPFS Application", "Go", "Основное приложение IPFS с оптимизированным блочным хранилищем")
        
        Container_Boundary(blockstore_opt, "Optimized Blockstore") {
            Component(multitier, "MultiTier Cache", "Go", "Многоуровневое кэширование")
            Component(batch_io, "Batch I/O Manager", "Go", "Батчевые операции")
            Component(streaming, "Streaming Handler", "Go", "Потоковая обработка")
            Component(memory_mgr, "Memory Manager", "Go", "Управление памятью")
        }
        
        Container(metrics_exp, "Metrics Exporter", "Go", "Prometheus метрики")
    }
    
    Deployment_Node(memory, "System Memory", "RAM") {
        ContainerDb(memory_cache, "Memory Cache", "LRU Cache", "Быстрый кэш блоков в памяти")
        ContainerDb(app_heap, "Application Heap", "Go Heap", "Основная память приложения")
    }
    
    Deployment_Node(ssd_storage, "SSD Storage", "NVMe SSD") {
        ContainerDb(ssd_cache, "SSD Cache", "File System", "Средний уровень кэширования")
        ContainerDb(temp_files, "Temporary Files", "File System", "Временные файлы для потоковой обработки")
    }
    
    Deployment_Node(hdd_storage, "HDD Storage", "SATA HDD") {
        ContainerDb(persistent_store, "Persistent Store", "File System", "Основное хранилище блоков")
        ContainerDb(metadata_store, "Metadata Store", "File System", "Метаданные чанков и индексы")
    }
}

Deployment_Node(monitoring_server, "Monitoring Server", "Linux Server") {
    Container(prometheus, "Prometheus", "Time Series DB", "Сбор и хранение метрик")
    Container(grafana, "Grafana", "Visualization", "Дашборды мониторинга")
    Container(alertmanager, "AlertManager", "Alerting", "Система алертов")
}

Deployment_Node(client_nodes, "Client Nodes", "Various OS") {
    Container(ipfs_clients, "IPFS Clients", "Go/JS", "Клиенты IPFS сети")
    Container(applications, "Applications", "Various", "Приложения использующие IPFS")
}

System_Ext(ipfs_network, "IPFS Network", "Глобальная сеть IPFS узлов")

' Внутренние связи сервера
Rel(boxo_app, multitier, "Использует", "Go API")
Rel(boxo_app, batch_io, "Использует", "Go API")
Rel(boxo_app, streaming, "Использует", "Go API")
Rel(boxo_app, memory_mgr, "Использует", "Go API")

Rel(multitier, memory_cache, "Кэширует", "Memory access")
Rel(multitier, ssd_cache, "Кэширует", "File I/O")
Rel(multitier, persistent_store, "Хранит", "File I/O")

Rel(batch_io, persistent_store, "Батчевые операции", "File I/O")
Rel(streaming, temp_files, "Временные чанки", "File I/O")
Rel(streaming, metadata_store, "Метаданные", "File I/O")

Rel(memory_mgr, app_heap, "Мониторит", "Runtime API")
Rel(memory_mgr, memory_cache, "Управляет", "Cleanup calls")

' Метрики
Rel(multitier, metrics_exp, "Экспортирует метрики", "Go channels")
Rel(batch_io, metrics_exp, "Экспортирует метрики", "Go channels")
Rel(streaming, metrics_exp, "Экспортирует метрики", "Go channels")
Rel(memory_mgr, metrics_exp, "Экспортирует метрики", "Go channels")

Rel(metrics_exp, prometheus, "HTTP /metrics", "HTTP")

' Мониторинг
Rel(prometheus, grafana, "Данные метрик", "HTTP API")
Rel(prometheus, alertmanager, "Алерты", "HTTP")

' Клиентские подключения
Rel(ipfs_clients, boxo_app, "IPFS операции", "libp2p")
Rel(applications, boxo_app, "HTTP API", "HTTP/REST")

' Сетевые связи
Rel(boxo_app, ipfs_network, "P2P синхронизация", "libp2p")

note right of memory_cache
**Memory Tier**
- Размер: 1-4 GB
- Латентность: < 1ms
- Пропускная способность: > 10 GB/s
- LRU с частотой доступа
end note

note right of ssd_cache
**SSD Tier**
- Размер: 100-500 GB
- Латентность: 1-10ms
- Пропускная способность: 1-3 GB/s
- Автоматическое продвижение/понижение
end note

note right of persistent_store
**HDD Tier**
- Размер: 1-10 TB
- Латентность: 10-100ms
- Пропускная способность: 100-200 MB/s
- Долгосрочное хранение
end note

note top of batch_io
**Batch I/O Optimizations**
- Группировка операций: до 1000 блоков
- Асинхронная обработка: 10+ worker'ов
- Транзакционность: ACID гарантии
- Retry механизмы: до 3 попыток
end note

note top of streaming
**Streaming Optimizations**
- Пороговый размер: > 1MB
- Размер чанка: 256KB
- Сжатие: gzip уровень 6
- Потоковая обработка: без загрузки в память
end note

note top of memory_mgr
**Memory Management**
- Мониторинг: каждые 5 секунд
- Пороги давления: 60%, 75%, 85%, 95%
- Graceful degradation: 4 уровня
- Автоматическая очистка: LRU + размер
end note

@enduml